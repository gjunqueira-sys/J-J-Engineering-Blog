{
  
    
        "post0": {
            "title": "CoinGecko API Wrapper in Julia Language - Part 1",
            "content": "Basic API Documentation and Installation Information . One of the most powerfull crypto API&#39;s out there. APIs are simple and easy to use, fully documented at the website. . (&quot;CoinGecko API&quot; is a trademark of CoinGecko) . API Information: . CoinGecko API . Julia API Wrapper Package information: . Pls check my package information at the website for code and documentation. . gjunqueira-sys / CoinGeckoAPI . Example Use: Get top 10 coins by Market Cap . # Load dependancies using CoinGeckoAPI; using Plots; . . # check API documentation for more information - we are interested in the /coins/markets function call for this example # https://www.coingecko.com/en/api/documentation # call the API, market cap in USD, optional arguments are: # order: &quot;market_cap_desc&quot; # per_page: 10 # page: 1 # We are getting only the top 10 market caps r = get_coins_markets(&quot;usd&quot;, &quot;order&quot; =&gt; &quot;market_cap_desc&quot;, &quot;per_page&quot; =&gt; &quot;10&quot;, &quot;page&quot; =&gt; &quot;1&quot;) . 10-element JSON3.Array{JSON3.Object, Base.CodeUnits{UInt8, String}, Vector{UInt64}}: { &#34;id&#34;: &#34;bitcoin&#34;, &#34;symbol&#34;: &#34;btc&#34;, &#34;name&#34;: &#34;Bitcoin&#34;, &#34;image&#34;: &#34;https://assets.coingecko.com/coins/images/1/large/bitcoin.png?1547033579&#34;, &#34;current_price&#34;: 47916, &#34;market_cap&#34;: 906297920954, &#34;market_cap_rank&#34;: 1, &#34;fully_diluted_valuation&#34;: 1006240028475, &#34;total_volume&#34;: 28010895159, &#34;high_24h&#34;: 49161, &#34;low_24h&#34;: 46648, &#34;price_change_24h&#34;: -1124.612246232348, &#34;price_change_percentage_24h&#34;: -2.29322, &#34;market_cap_change_24h&#34;: -2.1228853596747925e10, &#34;market_cap_change_percentage_24h&#34;: -2.28876, &#34;circulating_supply&#34;: 18914231, &#34;total_supply&#34;: 21000000, &#34;max_supply&#34;: 21000000, &#34;ath&#34;: 69045, &#34;ath_change_percentage&#34;: -30.60127, &#34;ath_date&#34;: &#34;2021-11-10T14:24:11.849Z&#34;, &#34;atl&#34;: 67.81, &#34;atl_change_percentage&#34;: 70563.4692, &#34;atl_date&#34;: &#34;2013-07-06T00:00:00.000Z&#34;, &#34;roi&#34;: nothing, &#34;last_updated&#34;: &#34;2021-12-29T15:20:32.953Z&#34; } { &#34;id&#34;: &#34;ethereum&#34;, &#34;symbol&#34;: &#34;eth&#34;, &#34;name&#34;: &#34;Ethereum&#34;, &#34;image&#34;: &#34;https://assets.coingecko.com/coins/images/279/large/ethereum.png?1595348880&#34;, &#34;current_price&#34;: 3792.51, &#34;market_cap&#34;: 451082764597, &#34;market_cap_rank&#34;: 2, &#34;fully_diluted_valuation&#34;: nothing, &#34;total_volume&#34;: 16999596090, &#34;high_24h&#34;: 3917.82, &#34;low_24h&#34;: 3715.72, &#34;price_change_24h&#34;: -120.737576463851, &#34;price_change_percentage_24h&#34;: -3.08536, &#34;market_cap_change_24h&#34;: -1.4010620487390198e10, &#34;market_cap_change_percentage_24h&#34;: -3.01243, &#34;circulating_supply&#34;: 1.189405640615e8, &#34;total_supply&#34;: nothing, &#34;max_supply&#34;: nothing, &#34;ath&#34;: 4878.26, &#34;ath_change_percentage&#34;: -22.36412, &#34;ath_date&#34;: &#34;2021-11-10T14:24:19.604Z&#34;, &#34;atl&#34;: 0.432979, &#34;atl_change_percentage&#34;: 874603.33914, &#34;atl_date&#34;: &#34;2015-10-20T00:00:00.000Z&#34;, &#34;roi&#34;: { &#34;times&#34;: 104.81646007250602, &#34;currency&#34;: &#34;btc&#34;, &#34;percentage&#34;: 10481.646007250602 }, &#34;last_updated&#34;: &#34;2021-12-29T15:23:50.247Z&#34; } { &#34;id&#34;: &#34;binancecoin&#34;, &#34;symbol&#34;: &#34;bnb&#34;, &#34;name&#34;: &#34;Binance Coin&#34;, &#34;image&#34;: &#34;https://assets.coingecko.com/coins/images/825/large/binance-coin-logo.png?1547034615&#34;, &#34;current_price&#34;: 530.45, &#34;market_cap&#34;: 89188121378, &#34;market_cap_rank&#34;: 3, &#34;fully_diluted_valuation&#34;: 89188121378, &#34;total_volume&#34;: 2106762267, &#34;high_24h&#34;: 549.72, &#34;low_24h&#34;: 522.51, &#34;price_change_24h&#34;: -18.651546146989, &#34;price_change_percentage_24h&#34;: -3.39675, &#34;market_cap_change_24h&#34;: -3.096120293115753e9, &#34;market_cap_change_percentage_24h&#34;: -3.35498, &#34;circulating_supply&#34;: 1.681370359e8, &#34;total_supply&#34;: 1.681370359e8, &#34;max_supply&#34;: 1.681370359e8, &#34;ath&#34;: 686.31, &#34;ath_change_percentage&#34;: -22.76453, &#34;ath_date&#34;: &#34;2021-05-10T07:24:17.097Z&#34;, &#34;atl&#34;: 0.0398177, &#34;atl_change_percentage&#34;: 1.3311475902e6, &#34;atl_date&#34;: &#34;2017-10-19T00:00:00.000Z&#34;, &#34;roi&#34;: nothing, &#34;last_updated&#34;: &#34;2021-12-29T15:23:34.647Z&#34; } { &#34;id&#34;: &#34;tether&#34;, &#34;symbol&#34;: &#34;usdt&#34;, &#34;name&#34;: &#34;Tether&#34;, &#34;image&#34;: &#34;https://assets.coingecko.com/coins/images/325/large/Tether-logo.png?1598003707&#34;, &#34;current_price&#34;: 1, &#34;market_cap&#34;: 78288597123, &#34;market_cap_rank&#34;: 4, &#34;fully_diluted_valuation&#34;: nothing, &#34;total_volume&#34;: 60230102164, &#34;high_24h&#34;: 1.01, &#34;low_24h&#34;: 0.979051, &#34;price_change_24h&#34;: 0.00332418, &#34;price_change_percentage_24h&#34;: 0.33262, &#34;market_cap_change_24h&#34;: -5.531133113516235e7, &#34;market_cap_change_percentage_24h&#34;: -0.0706, &#34;circulating_supply&#34;: 7.81495563271481e10, &#34;total_supply&#34;: 7.81495563271481e10, &#34;max_supply&#34;: nothing, &#34;ath&#34;: 1.32, &#34;ath_change_percentage&#34;: -24.28519, &#34;ath_date&#34;: &#34;2018-07-24T00:00:00.000Z&#34;, &#34;atl&#34;: 0.572521, &#34;atl_change_percentage&#34;: 74.97684, &#34;atl_date&#34;: &#34;2015-03-02T00:00:00.000Z&#34;, &#34;roi&#34;: nothing, &#34;last_updated&#34;: &#34;2021-12-29T15:24:25.903Z&#34; } { &#34;id&#34;: &#34;solana&#34;, &#34;symbol&#34;: &#34;sol&#34;, &#34;name&#34;: &#34;Solana&#34;, &#34;image&#34;: &#34;https://assets.coingecko.com/coins/images/4128/large/solana.png?1640133422&#34;, &#34;current_price&#34;: 175.34, &#34;market_cap&#34;: 54331707949, &#34;market_cap_rank&#34;: 5, &#34;fully_diluted_valuation&#34;: nothing, &#34;total_volume&#34;: 2294853746, &#34;high_24h&#34;: 187.15, &#34;low_24h&#34;: 171.19, &#34;price_change_24h&#34;: -11.274632293204, &#34;price_change_percentage_24h&#34;: -6.04173, &#34;market_cap_change_24h&#34;: -3.904812660280754e9, &#34;market_cap_change_percentage_24h&#34;: -6.70509, &#34;circulating_supply&#34;: 3.09349208013695e8, &#34;total_supply&#34;: 5.0818096357e8, &#34;max_supply&#34;: nothing, &#34;ath&#34;: 259.96, &#34;ath_change_percentage&#34;: -32.55172, &#34;ath_date&#34;: &#34;2021-11-06T21:54:35.825Z&#34;, &#34;atl&#34;: 0.500801, &#34;atl_change_percentage&#34;: 34911.50766, &#34;atl_date&#34;: &#34;2020-05-11T19:35:23.449Z&#34;, &#34;roi&#34;: nothing, &#34;last_updated&#34;: &#34;2021-12-29T15:21:23.569Z&#34; } { &#34;id&#34;: &#34;cardano&#34;, &#34;symbol&#34;: &#34;ada&#34;, &#34;name&#34;: &#34;Cardano&#34;, &#34;image&#34;: &#34;https://assets.coingecko.com/coins/images/975/large/cardano.png?1547034860&#34;, &#34;current_price&#34;: 1.4, &#34;market_cap&#34;: 44813960938, &#34;market_cap_rank&#34;: 6, &#34;fully_diluted_valuation&#34;: 62889155910, &#34;total_volume&#34;: 1586806854, &#34;high_24h&#34;: 1.5, &#34;low_24h&#34;: 1.35, &#34;price_change_24h&#34;: -0.094602355174, &#34;price_change_percentage_24h&#34;: -6.34005, &#34;market_cap_change_24h&#34;: -2.999361135610855e9, &#34;market_cap_change_percentage_24h&#34;: -6.27307, &#34;circulating_supply&#34;: 3.20663906684135e10, &#34;total_supply&#34;: 45000000000, &#34;max_supply&#34;: 45000000000, &#34;ath&#34;: 3.09, &#34;ath_change_percentage&#34;: -54.83171, &#34;ath_date&#34;: &#34;2021-09-02T06:00:10.474Z&#34;, &#34;atl&#34;: 0.01925275, &#34;atl_change_percentage&#34;: 7142.10989, &#34;atl_date&#34;: &#34;2020-03-13T02:22:55.044Z&#34;, &#34;roi&#34;: nothing, &#34;last_updated&#34;: &#34;2021-12-29T15:22:56.538Z&#34; } { &#34;id&#34;: &#34;usd-coin&#34;, &#34;symbol&#34;: &#34;usdc&#34;, &#34;name&#34;: &#34;USD Coin&#34;, &#34;image&#34;: &#34;https://assets.coingecko.com/coins/images/6319/large/USD_Coin_icon.png?1547042389&#34;, &#34;current_price&#34;: 1, &#34;market_cap&#34;: 42222109851, &#34;market_cap_rank&#34;: 7, &#34;fully_diluted_valuation&#34;: nothing, &#34;total_volume&#34;: 3093272264, &#34;high_24h&#34;: 1.01, &#34;low_24h&#34;: 0.987923, &#34;price_change_24h&#34;: 0.00067107, &#34;price_change_percentage_24h&#34;: 0.06704, &#34;market_cap_change_24h&#34;: -1.417215849087906e8, &#34;market_cap_change_percentage_24h&#34;: -0.33453, &#34;circulating_supply&#34;: 4.20757890025904e10, &#34;total_supply&#34;: 4.20780913152811e10, &#34;max_supply&#34;: nothing, &#34;ath&#34;: 1.17, &#34;ath_change_percentage&#34;: -14.5826, &#34;ath_date&#34;: &#34;2019-05-08T00:40:28.300Z&#34;, &#34;atl&#34;: 0.891848, &#34;atl_change_percentage&#34;: 12.31679, &#34;atl_date&#34;: &#34;2021-05-19T13:14:05.611Z&#34;, &#34;roi&#34;: nothing, &#34;last_updated&#34;: &#34;2021-12-29T15:20:44.878Z&#34; } { &#34;id&#34;: &#34;ripple&#34;, &#34;symbol&#34;: &#34;xrp&#34;, &#34;name&#34;: &#34;XRP&#34;, &#34;image&#34;: &#34;https://assets.coingecko.com/coins/images/44/large/xrp-symbol-white-128.png?1605778731&#34;, &#34;current_price&#34;: 0.845007, &#34;market_cap&#34;: 40168224471, &#34;market_cap_rank&#34;: 8, &#34;fully_diluted_valuation&#34;: 84500703660, &#34;total_volume&#34;: 2708919413, &#34;high_24h&#34;: 0.886577, &#34;low_24h&#34;: 0.824043, &#34;price_change_24h&#34;: -0.039255004385, &#34;price_change_percentage_24h&#34;: -4.4393, &#34;market_cap_change_24h&#34;: -1.8607335893210068e9, &#34;market_cap_change_percentage_24h&#34;: -4.42727, &#34;circulating_supply&#34;: 47535964473, &#34;total_supply&#34;: 100000000000, &#34;max_supply&#34;: 100000000000, &#34;ath&#34;: 3.4, &#34;ath_change_percentage&#34;: -75.1709, &#34;ath_date&#34;: &#34;2018-01-07T00:00:00.000Z&#34;, &#34;atl&#34;: 0.00268621, &#34;atl_change_percentage&#34;: 31312.49645, &#34;atl_date&#34;: &#34;2014-05-22T00:00:00.000Z&#34;, &#34;roi&#34;: nothing, &#34;last_updated&#34;: &#34;2021-12-29T15:23:10.332Z&#34; } { &#34;id&#34;: &#34;terra-luna&#34;, &#34;symbol&#34;: &#34;luna&#34;, &#34;name&#34;: &#34;Terra&#34;, &#34;image&#34;: &#34;https://assets.coingecko.com/coins/images/8284/large/luna1557227471663.png?1567147072&#34;, &#34;current_price&#34;: 86.34, &#34;market_cap&#34;: 31013731734, &#34;market_cap_rank&#34;: 9, &#34;fully_diluted_valuation&#34;: 85569173378, &#34;total_volume&#34;: 2740042645, &#34;high_24h&#34;: 88.65, &#34;low_24h&#34;: 83.02, &#34;price_change_24h&#34;: -2.117375887249, &#34;price_change_percentage_24h&#34;: -2.39378, &#34;market_cap_change_24h&#34;: -1.3829745586032486e9, &#34;market_cap_change_percentage_24h&#34;: -4.26887, &#34;circulating_supply&#34;: 3.62440473703761e8, &#34;total_supply&#34;: 8.34612242168804e8, &#34;max_supply&#34;: 1000000000, &#34;ath&#34;: 103.34, &#34;ath_change_percentage&#34;: -16.45199, &#34;ath_date&#34;: &#34;2021-12-27T02:13:02.051Z&#34;, &#34;atl&#34;: 0.121798, &#34;atl_change_percentage&#34;: 70784.39353, &#34;atl_date&#34;: &#34;2020-03-18T17:03:01.083Z&#34;, &#34;roi&#34;: nothing, &#34;last_updated&#34;: &#34;2021-12-29T15:22:14.134Z&#34; } { &#34;id&#34;: &#34;polkadot&#34;, &#34;symbol&#34;: &#34;dot&#34;, &#34;name&#34;: &#34;Polkadot&#34;, &#34;image&#34;: &#34;https://assets.coingecko.com/coins/images/12171/large/polkadot.png?1639712644&#34;, &#34;current_price&#34;: 28.64, &#34;market_cap&#34;: 30521002325, &#34;market_cap_rank&#34;: 10, &#34;fully_diluted_valuation&#34;: nothing, &#34;total_volume&#34;: 1630654667, &#34;high_24h&#34;: 29.51, &#34;low_24h&#34;: 27.34, &#34;price_change_24h&#34;: -0.72640476082, &#34;price_change_percentage_24h&#34;: -2.47361, &#34;market_cap_change_24h&#34;: -8.566086749205284e8, &#34;market_cap_change_percentage_24h&#34;: -2.73, &#34;circulating_supply&#34;: 1.06907813915202e9, &#34;total_supply&#34;: 1.15002549773682e9, &#34;max_supply&#34;: nothing, &#34;ath&#34;: 54.98, &#34;ath_change_percentage&#34;: -47.90789, &#34;ath_date&#34;: &#34;2021-11-04T14:10:09.301Z&#34;, &#34;atl&#34;: 2.7, &#34;atl_change_percentage&#34;: 961.76782, &#34;atl_date&#34;: &#34;2020-08-20T05:48:11.359Z&#34;, &#34;roi&#34;: nothing, &#34;last_updated&#34;: &#34;2021-12-29T15:21:00.927Z&#34; } . Now lets look at the output closer: . length(r) . 10 . r |&gt; length #or call the same function but with the pipe operator, my preference! . 10 . r |&gt; typeof # this is a vector output, with length 10 . JSON3.Array{JSON3.Object, Base.CodeUnits{UInt8, String}, Vector{UInt64}} . we can check the first element: . r[1] . JSON3.Object{Base.CodeUnits{UInt8, String}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}} with 26 entries: :id =&gt; &#34;bitcoin&#34; :symbol =&gt; &#34;btc&#34; :name =&gt; &#34;Bitcoin&#34; :image =&gt; &#34;https://assets.coingecko.com/coins/imag… :current_price =&gt; 47916 :market_cap =&gt; 906297920954 :market_cap_rank =&gt; 1 :fully_diluted_valuation =&gt; 1006240028475 :total_volume =&gt; 28010895159 :high_24h =&gt; 49161 :low_24h =&gt; 46648 :price_change_24h =&gt; -1124.61 :price_change_percentage_24h =&gt; -2.29322 :market_cap_change_24h =&gt; -2.12289e10 :market_cap_change_percentage_24h =&gt; -2.28876 :circulating_supply =&gt; 18914231 :total_supply =&gt; 21000000 :max_supply =&gt; 21000000 :ath =&gt; 69045 ⋮ =&gt; ⋮ . Now let us get all the keys and values pairs: . keys(r[1]) . KeySet for a JSON3.Object{Base.CodeUnits{UInt8, String}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}} with 26 entries. Keys: :id :symbol :name :image :current_price :market_cap :market_cap_rank :fully_diluted_valuation :total_volume :high_24h :low_24h :price_change_24h :price_change_percentage_24h :market_cap_change_24h :market_cap_change_percentage_24h :circulating_supply :total_supply :max_supply :ath ⋮ . values(r[1]) . ValueIterator for a JSON3.Object{Base.CodeUnits{UInt8, String}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}} with 26 entries. Values: &#34;bitcoin&#34; &#34;btc&#34; &#34;Bitcoin&#34; &#34;https://assets.coingecko.com/coins/images/1/large/bitcoin.png?1547033579&#34; 47916 906297920954 1 1006240028475 28010895159 49161 46648 -1124.612246232348 -2.29322 -2.1228853596747925e10 -2.28876 18914231 21000000 21000000 69045 ⋮ . For this example, we are only interested in name and market cap. . We can use the following code to push names and values to vectors for plotting: . Vₙ = [];# name vector Mc = []; #value vector for i in 1:length(r) push!(Vₙ, r[i][&quot;id&quot;]); #get vector with names push!(Mc, r[i][&quot;market_cap&quot;]); #get vector with market caps end . (r[i])[&#34;id&#34;] = &#34;bitcoin&#34; (r[i])[&#34;id&#34;] = &#34;ethereum&#34; (r[i])[&#34;id&#34;] = &#34;binancecoin&#34; (r[i])[&#34;id&#34;] = &#34;tether&#34; (r[i])[&#34;id&#34;] = &#34;solana&#34; (r[i])[&#34;id&#34;] = &#34;cardano&#34; (r[i])[&#34;id&#34;] = &#34;usd-coin&#34; (r[i])[&#34;id&#34;] = &#34;ripple&#34; (r[i])[&#34;id&#34;] = &#34;terra-luna&#34; (r[i])[&#34;id&#34;] = &#34;polkadot&#34; . bar(Vₙ, Mc, title = &quot;top 10 coins market cap&quot;, ylabel=&quot;Market cap&quot;, xrotation= 45 ) #plot market caps . That&#39;s it! .",
            "url": "https://gjunqueira-sys.github.io/J-J-Engineering-Blog/jupyter/julialang/crypto/2021/12/29/BasicAPIBlogPart1.html",
            "relUrl": "/jupyter/julialang/crypto/2021/12/29/BasicAPIBlogPart1.html",
            "date": " • Dec 29, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Symbolic Euler's Method",
            "content": "# load dependacies using MyCalculus using Plots using Symbolics . . Apply Euler&#39;s method for the following First-Order Differential Equation: . $fun(t, y) = y^2 -t$ . fun(t, y) = y^2 -t . fun (generic function with 1 method) . Definition of Euler&#39;s Method function: . $EulerMethod(f, x₀, y₀, step= 0.5, n=100.0)$ . Function to approximate solution to an ordinary differential equation using the Euler&#39;s Method. dy/dx = f(x, y) where y(x₀) = y₀ and x₀ = x₀. . Arguments . $f:$ function to approximate solution to, of the form f(x, y). This is the right hand side of the differential equation. . | $x₀:$ initial $x$ value condition | $y₀:$ initial $y$ value condition | $step:$ step size for the Euler&#39;s Method | $n:$ number of steps to take | . Returns . $x:$ array of x values | $y:$ array of y values | . x, y = EulerMethod(fun, -1.0, -0.5, 0.5, 5) . ([-1.0, -0.5, 0.0, 0.5, 1.0], [-0.5, 0.125, 0.3828125, 0.456085205078125, 0.31009206222370267]) . plot(x,y, ylim=(-0.5,0.5), xlim=(-1,1), framestyle = :, ylabel = &quot;y&quot;, xlabel = &quot;x&quot;) . We can also use Symbolics by passing Symbolics variables to the function: . This is a good way to &quot;peek&quot; into the inner workings of the Euler&#39;s Method and see what it&#39;s doing for every iteration. . It also showcases the power of Symbolics. Due to highly composable julia code, we can use Symbolics everywhere a number is expected. . @variables x₀, y₀, step #defines the symbollics variables t, y = EulerMethod(fun, x₀, y₀, step, 5) . (Num[x₀, step + x₀, x₀ + 2step, x₀ + 3step, x₀ + 4step], Num[y₀, y₀ + step*(y₀^2 - x₀), y₀ + step*(y₀^2 - x₀) + step*((y₀ + step*(y₀^2 - x₀))^2 - step - x₀), y₀ + step*(y₀^2 - x₀) + step*((y₀ + step*(y₀^2 - x₀))^2 - step - x₀) + step*((y₀ + step*(y₀^2 - x₀) + step*((y₀ + step*(y₀^2 - x₀))^2 - step - x₀))^2 - 2step - x₀), y₀ + step*(y₀^2 - x₀) + step*((y₀ + step*(y₀^2 - x₀))^2 - step - x₀) + step*((y₀ + step*(y₀^2 - x₀) + step*((y₀ + step*(y₀^2 - x₀))^2 - step - x₀))^2 - 2step - x₀) + step*((y₀ + step*(y₀^2 - x₀) + step*((y₀ + step*(y₀^2 - x₀))^2 - step - x₀) + step*((y₀ + step*(y₀^2 - x₀) + step*((y₀ + step*(y₀^2 - x₀))^2 - step - x₀))^2 - 2step - x₀))^2 - 3step - x₀)]) . t; . begin{equation} left[ begin{array}{c} x{_0} step + x{_0} x{_0} + 2 step x{_0} + 3 step x{_0} + 4 step end{array} right] end{equation} y; . $$ begin{equation} left[ begin{array}{c} y{_0} y{_0} + step left( - x{_0} + y{_0}^{2} right) y{_0} + step left( - x{_0} + y{_0}^{2} right) + step left( - step - x{_0} + left( y{_0} + step left( - x{_0} + y{_0}^{2} right) right)^{2} right) y{_0} + step left( - x{_0} + y{_0}^{2} right) + step left( - step - x{_0} + left( y{_0} + step left( - x{_0} + y{_0}^{2} right) right)^{2} right) + step left( - 2 step - x{_0} + left( y{_0} + step left( - x{_0} + y{_0}^{2} right) + step left( - step - x{_0} + left( y{_0} + step left( - x{_0} + y{_0}^{2} right) right)^{2} right) right)^{2} right) y{_0} + step left( - x{_0} + y{_0}^{2} right) + step left( - step - x{_0} + left( y{_0} + step left( - x{_0} + y{_0}^{2} right) right)^{2} right) + step left( - 2 step - x{_0} + left( y{_0} + step left( - x{_0} + y{_0}^{2} right) + step left( - step - x{_0} + left( y{_0} + step left( - x{_0} + y{_0}^{2} right) right)^{2} right) right)^{2} right) + step left( - 3 step - x{_0} + left( y{_0} + step left( - x{_0} + y{_0}^{2} right) + step left( - step - x{_0} + left( y{_0} + step left( - x{_0} + y{_0}^{2} right) right)^{2} right) + step left( - 2 step - x{_0} + left( y{_0} + step left( - x{_0} + y{_0}^{2} right) + step left( - step - x{_0} + left( y{_0} + step left( - x{_0} + y{_0}^{2} right) right)^{2} right) right)^{2} right) right)^{2} right) end{array} right] end{equation}$$ .",
            "url": "https://gjunqueira-sys.github.io/J-J-Engineering-Blog/jupyter/math/calculus/symbolics/julialang/2021/12/28/EulersMethod.html",
            "relUrl": "/jupyter/math/calculus/symbolics/julialang/2021/12/28/EulersMethod.html",
            "date": " • Dec 28, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Signal Processing with Julia Language- Part I",
            "content": "Installation . This notebook will make use of my package located at MySignalProcessing.jl. . For installation, please follow the instructions in the README.md file at my github repository. . Signal Constructors . In these examples, we deal with Discrete Signals only. Discrete Signal, are most often used in the context of digital communication and have many applications in various engineering fields. . A discrete signal is a sequence of samples, each of which is a value of a specific type. . The correct way to represent a discrete signal is to use two vectors: . x: the time vector of the signal (horizontal axis), or in the discete case, the vector of the indices of the samples (n) | y: the values of the signal (vertical axis), or its amplitude, at each of the samples (n). | . As such, I define a custom type, namely Signal, which is a structure that contains the two vectors above. . It has a .A fieldname, which is the amplitude of the signal and a .n fieldname, which is the sample vector. . mutable struct signal A::Vector{Real} #Amplitude of the signal n::Vector{Real} #horizontal axis (discrete) of signal (in samples) end . signal(A::Real, n::Int) Constructor . using MySignalProcessing using Plots . . s = signal(1.5, 10) # create a signal with amplitude 1.5 and number of samples 10, starting from sample 0 . signal(Real[1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5], Real[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) . We can now check the fieldnames of signal s: . s |&gt; typeof . signal . s |&gt; typeof |&gt; fieldnames . (:A, :n) . s.A |&gt; println . Real[1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5] . s.n |&gt; println . Real[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . plot(s.n, s.A, line= :stem, title = &quot;Signal&quot;, marker=:o, size=(400,300), ylabel=&quot;Amplitude&quot;, xlabel=&quot;Sample&quot;) . signal(A::Real, start::Int, stop::Int) Constructor . s1 = signal(π , -5,7) # create a signal with amplitude pi , starting from sample -5 and ending at sample 7 . signal(Real[3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793], Real[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7]) . plot(s1.n, s1.A, line= :stem, title = &quot;Signal&quot;, marker=:o, size=(400,300), ylabel=&quot;Amplitude&quot;, xlabel=&quot;Sample&quot;) . signal(A::Vector, n::Vector) Constructor . With this constructor, we can buld a signal by passing two vectors to the function, one for the amplitude and one for the sample vector. . A = rand(4); n = [-1, 0, 1, 2]; s3 = signal(A, n); . plot(s3.n, s3.A, line= :stem, title = &quot;Signal&quot;, marker=:o, size=(400,300), ylabel=&quot;Amplitude&quot;, xlabel=&quot;Sample&quot;) . The signal type is the basic building block for various functions. Now you have a good understanding of the basic structure of a signal. .",
            "url": "https://gjunqueira-sys.github.io/J-J-Engineering-Blog/jupyter/signalprocessing/2021/12/27/SignalProcessingPart1.html",
            "relUrl": "/jupyter/signalprocessing/2021/12/27/SignalProcessingPart1.html",
            "date": " • Dec 27, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "First Blog Post",
            "content": "First Blog Post . Using a new platform to write and publish my blog posts. This is the first post. Most writers post their content to platforms such as Medium. But I wanted to try something new. Fastpages is a new platform that I’m using to write and publish my content. Unlike Medium, my content created is under my control and repository. 😄 .",
            "url": "https://gjunqueira-sys.github.io/J-J-Engineering-Blog/markdown/2021/12/26/FirstPost.html",
            "relUrl": "/markdown/2021/12/26/FirstPost.html",
            "date": " • Dec 26, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://gjunqueira-sys.github.io/J-J-Engineering-Blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://gjunqueira-sys.github.io/J-J-Engineering-Blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://gjunqueira-sys.github.io/J-J-Engineering-Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://gjunqueira-sys.github.io/J-J-Engineering-Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}